import streamlit as st
import requests
import urllib.parse
import mplfinance as mpf
import FinanceDataReader as fdr
import tiktoken
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import os
import pandas as pd

# ÌòÑÏû¨ ÌååÏùº(ÌååÏù¥Ïç¨ Ïä§ÌÅ¨Î¶ΩÌä∏) Í∏∞Ï§Ä Ìè∞Ìä∏ Í≤ΩÎ°úÎ•º ÏßÄÏ†ï
font_path = os.path.join(os.path.dirname(__file__), 'fonts', 'NanumGothic.ttf')
if os.path.exists(font_path):
    font_name = fm.FontProperties(fname=font_path).get_name()
    plt.rcParams['font.family'] = font_name
    plt.rcParams['axes.unicode_minus'] = False
else:
    st.warning("Ìè∞Ìä∏ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. ÌïúÍ∏ÄÏù¥ Íπ®Ïßà Ïàò ÏûàÏäµÎãàÎã§.")


def main():
    st.set_page_config(page_title="Stock Analysis Chatbot", page_icon=":chart_with_upwards_trend:")
    st.title("Í∏∞ÏóÖ Ï†ïÎ≥¥ Î∂ÑÏÑù QA Chat")

    if "conversation" not in st.session_state:
        st.session_state.conversation = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = None
    if "processComplete" not in st.session_state:
        st.session_state.processComplete = False
    if "news_data" not in st.session_state:
        st.session_state.news_data = None
    if "company_name" not in st.session_state:
        st.session_state.company_name = None
    if "selected_period" not in st.session_state:
        st.session_state.selected_period = "1day"


    with st.sidebar:
        openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")
        company_name = st.text_input("Î∂ÑÏÑùÌï† Í∏∞ÏóÖÎ™Ö (ÏΩîÏä§Ìîº ÏÉÅÏû•)")
        process = st.button("Î∂ÑÏÑù ÏãúÏûë")

    if process:
        if not openai_api_key or not company_name:
            st.info("OpenAI API ÌÇ§ÏôÄ Í∏∞ÏóÖÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
            st.stop()

        news_data = crawl_news(company_name)
        if not news_data:
            st.warning("Ìï¥Îãπ Í∏∞ÏóÖÏùò ÏµúÍ∑º Îâ¥Ïä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            st.stop()

        # Î∂ÑÏÑù Í≤∞Í≥ºÎ•º session_stateÏóê Ï†ÄÏû•
        st.session_state.news_data = news_data
        st.session_state.company_name = company_name

        text_chunks = get_text_chunks(news_data)
        vectorstore = get_vectorstore(text_chunks)

        st.session_state.conversation = create_chat_chain(vectorstore, openai_api_key)
        st.session_state.processComplete = True

    # Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä ÏûàÏúºÎ©¥ Ìï≠ÏÉÅ ÏÉÅÎã®Ïóê Ï∂úÎ†•
    if st.session_state.processComplete and st.session_state.company_name:
        st.subheader(f"üìà {st.session_state.company_name} ÏµúÍ∑º Ï£ºÍ∞Ä Ï∂îÏù¥")
        selected_period = st.radio(
            "Í∏∞Í∞Ñ ÏÑ†ÌÉù",
            options=["1day", "week", "1month", "1year"],
            horizontal=True,
            index=["1day", "week", "1month", "1year"].index(st.session_state.selected_period)
        )
        if selected_period != st.session_state.selected_period:
            st.session_state.selected_period = selected_period

        st.write(f"üîç ÏÑ†ÌÉùÎêú Í∏∞Í∞Ñ: {st.session_state.selected_period}")

        with st.spinner(f"üìä {st.session_state.company_name} ({st.session_state.selected_period}) Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Îäî Ï§ë..."):
            if selected_period in ["1day", "week"]:
                ticker = get_ticker(st.session_state.company_name, source="yahoo")  # ‚úÖ ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§Ïö© Ìã∞Ïª§
                if not ticker:
                    st.error("Ìï¥Îãπ Í∏∞ÏóÖÏùò ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§ Ìã∞Ïª§ ÏΩîÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    return

                interval = "1m" if selected_period == "1day" else "5m"
                df = get_intraday_data_yahoo(ticker, period="5d" if selected_period == "week" else "1d",
                                             interval=interval)

            else:
                ticker = get_ticker(st.session_state.company_name, source="fdr")  # ‚úÖ FinanceDataReaderÏö© Ìã∞Ïª§
                if not ticker:
                    st.error("Ìï¥Îãπ Í∏∞ÏóÖÏùò FinanceDataReader Ìã∞Ïª§ ÏΩîÎìúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    return

                df = get_daily_stock_data_fdr(ticker, selected_period)

            if df.empty:
                st.warning(
                    f"üìâ {st.session_state.company_name} - Ìï¥Îãπ Í∏∞Í∞Ñ({st.session_state.selected_period})Ïùò Í±∞Îûò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
            else:
                plot_stock_plotly(df, st.session_state.company_name, st.session_state.selected_period)

        st.markdown("üì¢ ÏµúÍ∑º Í∏∞ÏóÖ Îâ¥Ïä§ Î™©Î°ù:")
        for news in st.session_state.news_data:
            st.markdown(f"- **{news['title']}** ([ÎßÅÌÅ¨]({news['link']}))")

    # Ï±ÑÌåÖ Î∂ÄÎ∂Ñ: ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÎ©¥ ÎåÄÌôîÍ∞Ä Ïù¥Ïñ¥Ïßê
    if query := st.chat_input("ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."):
        with st.chat_message("user"):
            st.markdown(query)

        with st.chat_message("assistant"):
            with st.spinner("Î∂ÑÏÑù Ï§ë..."):
                result = st.session_state.conversation({"question": query})
                response = result['answer']

                st.markdown(response)
                with st.expander("Ï∞∏Í≥† Îâ¥Ïä§ ÌôïÏù∏"):
                    for doc in result['source_documents']:
                        st.markdown(f"- [{doc.metadata['source']}]({doc.metadata['source']})")

def crawl_news(company):
    today = datetime.today()
    start_date = (today - timedelta(days=5)).strftime('%Y%m%d')
    end_date = today.strftime('%Y%m%d')
    encoded_query = urllib.parse.quote(company)
    url = f"https://search.naver.com/search.naver?where=news&query={encoded_query}&nso=so:r,p:from{start_date}to{end_date}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')
    articles = soup.select("ul.list_news > li")

    data = []
    for article in articles[:10]:
        title = article.select_one("a.news_tit").text
        link = article.select_one("a.news_tit")['href']
        content = article.select_one("div.news_dsc").text if article.select_one("div.news_dsc") else ""
        data.append({"title": title, "link": link, "content": content})

    return data

def tiktoken_len(text):
    tokenizer = tiktoken.get_encoding("cl100k_base")
    tokens = tokenizer.encode(text)
    return len(tokens)

def get_text_chunks(news_data):
    texts = [f"{item['title']}\n{item['content']}" for item in news_data]
    metadatas = [{"source": item["link"]} for item in news_data]
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=900,
        chunk_overlap=100,
        length_function=tiktoken_len
    )
    return text_splitter.create_documents(texts, metadatas=metadatas)

def get_vectorstore(text_chunks):
    embeddings = HuggingFaceEmbeddings(
        model_name="jhgan/ko-sroberta-multitask",
        model_kwargs={'device': 'cpu'},
        encode_kwargs={'normalize_embeddings': True}
    )
    return FAISS.from_documents(text_chunks, embeddings)

def create_chat_chain(vectorstore, openai_api_key):
    llm = ChatOpenAI(openai_api_key=openai_api_key, model_name='gpt-4', temperature=0)
    return ConversationalRetrievalChain.from_llm(
        llm=llm, chain_type="stuff", retriever=vectorstore.as_retriever(),
        memory=ConversationBufferMemory(memory_key='chat_history', return_messages=True, output_key='answer'),
        get_chat_history=lambda h: h, return_source_documents=True)

# ‚úÖ 1. ÏµúÍ∑º Í±∞ÎûòÏùº Ï∞æÍ∏∞ Ìï®Ïàò
def get_recent_trading_day():
    today = datetime.now()
    if today.hour < 9:  # 9Ïãú Ïù¥Ï†ÑÏù¥Î©¥ Ï†ÑÎÇ†ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú
        today -= timedelta(days=1)

    while today.weekday() in [5, 6]:  # ÌÜ†ÏöîÏùº(5), ÏùºÏöîÏùº(6)Ïù¥Î©¥ ÌïòÎ£®Ïî© Í∞êÏÜå
        today -= timedelta(days=1)

    return today.strftime('%Y-%m-%d')

# ‚úÖ 2. Ìã∞Ïª§ Ï°∞Ìöå Ìï®Ïàò (ÏïºÌõÑ & FinanceDataReader)
def get_ticker(company, source="yahoo"):
    try:
        listing = fdr.StockListing('KRX')
        ticker_row = listing[listing["Name"].str.strip() == company.strip()]
        if not ticker_row.empty:
            krx_ticker = str(ticker_row.iloc[0]["Code"]).zfill(6)
            if source == "yahoo":
                return krx_ticker + ".KS"  # ‚úÖ ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§Ïö© Ìã∞Ïª§ Î≥ÄÌôò
            return krx_ticker  # ‚úÖ FinanceDataReaderÏö© Ìã∞Ïª§
        return None

    except Exception as e:
        st.error(f"Ìã∞Ïª§ Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        return None

# ‚úÖ 3. ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§ÏóêÏÑú Î∂ÑÎ¥â Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (1day, week)
def get_intraday_data_yahoo(ticker, period="1d", interval="1m"):
    try:
        stock = yf.Ticker(ticker)
        df = stock.history(period=period, interval=interval)

        if df.empty:
            return pd.DataFrame()

        df = df.reset_index()
        df = df.rename(columns={"Datetime": "Date", "Close": "Close"})

        # ‚úÖ Ï£ºÎßê Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ (ÌòπÏãú ÎÇ®ÏïÑÏûàÎäî Í≤ΩÏö∞ ÎåÄÎπÑ)
        df["Date"] = pd.to_datetime(df["Date"])
        df = df[df["Date"].dt.weekday < 5].reset_index(drop=True)

        return df
    except Exception as e:
        st.error(f"ÏïºÌõÑ ÌååÏù¥ÎÇ∏Ïä§ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: {e}")
        return pd.DataFrame()

# ‚úÖ 4. FinanceDataReaderÎ•º ÌÜµÌïú ÏùºÎ≥Ñ ÏãúÏÑ∏ (1month, 1year)
def get_daily_stock_data_fdr(ticker, period):
    try:
        end_date = get_recent_trading_day()
        start_date = (datetime.strptime(end_date, '%Y-%m-%d') - timedelta(days=30 if period == "1month" else 365)).strftime('%Y-%m-%d')
        df = fdr.DataReader(ticker, start_date, end_date)

        if df.empty:
            return pd.DataFrame()

        df = df.reset_index()
        df = df.rename(columns={"Date": "Date", "Close": "Close"})

        # ‚úÖ Ï£ºÎßê Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†Ñ Ï†úÍ±∞
        df["Date"] = pd.to_datetime(df["Date"])
        df = df[df["Date"].dt.weekday < 5].reset_index(drop=True)

        return df
    except Exception as e:
        st.error(f"FinanceDataReader Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ïò§Î•ò: {e}")
        return pd.DataFrame()

# ‚úÖ 5. PlotlyÎ•º Ïù¥Ïö©Ìïú Ï£ºÍ∞Ä ÏãúÍ∞ÅÌôî Ìï®Ïàò (xÏ∂ï Ìè¨Îß∑ ÏµúÏ†ÅÌôî)
def plot_stock_plotly(df, company, period):
    if df is None or df.empty:
        st.warning(f"üìâ {company} - Ìï¥Îãπ Í∏∞Í∞Ñ({period})Ïùò Í±∞Îûò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        return

    fig = go.Figure()

    # ‚úÖ xÏ∂ï ÎÇ†Ïßú ÌòïÏãù ÏÑ§Ï†ï
    if period == "1day":
        df["FormattedDate"] = df["Date"].dt.strftime("%H:%M")  # ‚úÖ 1day ‚Üí HH:MM ÌòïÏãù
    elif period == "week":
        df["FormattedDate"] = df["Date"].dt.strftime("%m-%d %H:%M")  # ‚úÖ week ‚Üí MM-DD HH:MM ÌòïÏãù
    else:
        df["FormattedDate"] = df["Date"].dt.strftime("%m-%d")  # ‚úÖ 1month, 1year ‚Üí MM-DD ÌòïÏãù

    if period in ["1day", "week"]:
        fig.add_trace(go.Scatter(
            x=df["FormattedDate"],
            y=df["Close"],
            mode="lines+markers",
            line=dict(color="royalblue", width=2),
            marker=dict(size=5),
            name="Ï≤¥Í≤∞Í∞Ä"
        ))
    else:
        fig.add_trace(go.Candlestick(
            x=df["FormattedDate"],
            open=df["Open"],
            high=df["High"],
            low=df["Low"],
            close=df["Close"],
            name="Ï∫îÎì§ Ï∞®Ìä∏"
        ))

    fig.update_layout(
        title=f"{company} Ï£ºÍ∞Ä ({period})",
        xaxis_title="ÏãúÍ∞Ñ" if period == "1day" else "ÎÇ†Ïßú",
        yaxis_title="Ï£ºÍ∞Ä (KRW)",
        template="plotly_white",
        xaxis=dict(showgrid=True, type="category", tickangle=-45),
        hovermode="x unified"
    )

    st.plotly_chart(fig)

if __name__ == '__main__':
    main()
